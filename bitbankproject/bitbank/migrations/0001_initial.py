# Generated by Django 2.1.5 on 2019-01-29 11:44

import bitbank.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='登録メールアドレス')),
                ('email_for_notice', models.EmailField(default='', max_length=254, verbose_name='通知用メールアドレス')),
                ('full_name', models.CharField(blank=True, max_length=150, verbose_name='名前')),
                ('api_key', models.CharField(default='', max_length=255, verbose_name='API KEY')),
                ('api_secret_key', models.CharField(default='', max_length=255, verbose_name='API SECRET KEY')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', bitbank.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pair', models.CharField(choices=[('btc_jpy', 'btc_jpy'), ('xrp_jpy', 'xrp_jpy'), ('ltc_btc', 'ltc_btc'), ('eth_btc', 'eth_btc'), ('mona_jpy', 'mona_jpy'), ('mona_btc', 'mona_btc'), ('bcc_jpy', 'bcc_jpy'), ('bcc_btc', 'bcc_btc')], max_length=50, verbose_name='通貨')),
                ('special_order', models.CharField(choices=[('SINGLE', 'SINGLE'), ('IFD', 'IFD'), ('OCO', 'OCO'), ('IFDOCO', 'IFDOCO')], max_length=50, verbose_name='特殊注文')),
                ('side', models.CharField(choices=[('BUY', '買い'), ('SELL', '売り')], default='SELL', max_length=50, verbose_name='買い/売り')),
                ('order_type', models.CharField(choices=[('成行', '成行'), ('指値', '指値'), ('逆指値', '逆指値'), ('ストップリミット', 'ストップリミット')], max_length=50, verbose_name='注文方法')),
                ('price', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='注文価格')),
                ('limit_price', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='逆指値価格')),
                ('start_amount', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='注文数量')),
                ('remaining_amount', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='未約定数量')),
                ('executed_amount', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='約定済数量')),
                ('average_price', models.FloatField(blank=True, null=True, verbose_name='約定平均価格')),
                ('status', models.CharField(blank=True, max_length=50, null=True, verbose_name='注文ステータス')),
                ('order_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='取引ID')),
                ('ordered_at', models.DateTimeField(auto_now_add=True, verbose_name='注文日時')),
                ('udpated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('notify_if_filled', models.CharField(choices=[('ON', 'ON'), ('OFF', 'OFF')], default='OFF', max_length=10, verbose_name='約定通知')),
                ('notify_if_reach', models.CharField(choices=[('ON', 'ON'), ('OFF', 'OFF')], default='OFF', max_length=10, verbose_name='価格到達通知')),
                ('price_threshold_1', models.FloatField(blank=True, null=True, verbose_name='①価格到達通知設定')),
                ('price_threshold_2', models.FloatField(blank=True, null=True, verbose_name='②価格到達通知設定')),
                ('price_threshold_3', models.FloatField(blank=True, null=True, verbose_name='③価格到達通知設定')),
                ('price_threshold_4', models.FloatField(blank=True, null=True, verbose_name='④価格到達通知設定')),
                ('price_threshold_5', models.FloatField(blank=True, null=True, verbose_name='⑤価格到達通知設定')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
